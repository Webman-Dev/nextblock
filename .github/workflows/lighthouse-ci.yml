# Lighthouse CI Workflow - Performance Monitoring
# This workflow runs comprehensive Lighthouse CI checks with strict performance requirements
# Enforces 100% performance score and specific Core Web Vitals thresholds
name: Lighthouse CI - Performance Monitoring

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  # Allow manual triggering for performance testing
  workflow_dispatch:
    inputs:
      test_urls:
        description: 'Additional URLs to test (comma-separated)'
        required: false
        default: ''

jobs:
  lighthouse_ci_check:
    name: Lighthouse CI Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    # Environment variables with proper secret references
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      R2_S3_ENDPOINT: ${{ secrets.R2_S3_ENDPOINT }}
      NEXT_PUBLIC_R2_BASE_URL: ${{ secrets.NEXT_PUBLIC_R2_BASE_URL }}
      # Performance monitoring metadata
      GITHUB_RUN_NUMBER: ${{ github.run_number }}
      GITHUB_REF_NAME: ${{ github.ref_name }}
      GITHUB_SHA: ${{ github.sha }}
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # Fetch full history for performance comparison
          fetch-depth: 0

      - name: Set up Node.js with Performance Optimizations
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          # Enable npm cache for faster installs
          cache-dependency-path: 'package-lock.json'

      - name: Cache Next.js Build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-

      - name: Install Project Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          echo "‚úÖ Dependencies installed successfully"

      - name: Install Lighthouse CI CLI
        run: |
          npm install -g @lhci/cli@latest
          echo "‚úÖ Lighthouse CI installed: $(lhci --version)"

      - name: Build Next.js Application with Performance Monitoring
        run: |
          echo "üèóÔ∏è Building Next.js application for performance testing..."
          npm run build
          echo "‚úÖ Build completed successfully"
          # Display build statistics
          if [ -d ".next" ]; then
            echo "üìä Build output size:"
            du -sh .next/
          fi

      - name: Performance Pre-check
        run: |
          echo "üîç Pre-flight performance checks..."
          # Check if build artifacts exist
          if [ ! -d ".next" ]; then
            echo "‚ùå Build directory not found"
            exit 1
          fi
          # Check for critical files
          if [ ! -f "package.json" ]; then
            echo "‚ùå package.json not found"
            exit 1
          fi
          echo "‚úÖ Pre-flight checks passed"

      - name: Run Lighthouse CI with Enhanced Monitoring
        run: |
          echo "üöÄ Starting Lighthouse CI performance analysis..."
          echo "üìã Configuration: 100% performance score required"
          echo "üéØ Target metrics: LCP<1.2s, TTFB<300ms, Speed Index<1s"
          lhci autorun --config=lighthouserc.js
        env:
          # Enhanced GitHub integration
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          # Performance monitoring flags
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
          LHCI_BUILD_CONTEXT__CURRENT_BRANCH: ${{ github.ref_name }}
          LHCI_BUILD_CONTEXT__COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          # Additional test URLs from manual trigger
          LHCI_ADDITIONAL_URLS: ${{ github.event.inputs.test_urls }}

      - name: Performance Results Summary
        if: always()
        run: |
          echo "üìä Lighthouse CI Performance Summary"
          echo "=================================="
          echo "üéØ Target: 100% Performance Score"
          echo "üìà Core Web Vitals Thresholds:"
          echo "   ‚Ä¢ LCP (Largest Contentful Paint): < 1,200ms"
          echo "   ‚Ä¢ TTFB (Time to First Byte): < 300ms"
          echo "   ‚Ä¢ Speed Index: < 1,000ms"
          echo "   ‚Ä¢ Total Blocking Time: < 200ms"
          echo "   ‚Ä¢ Cumulative Layout Shift: < 0.1"
          echo "üíæ Bundle Size Budgets:"
          echo "   ‚Ä¢ JavaScript: < 500KB"
          echo "   ‚Ä¢ Images: < 1MB"
          echo "   ‚Ä¢ CSS: < 100KB"
          echo "   ‚Ä¢ Total Resources: < 2MB"
          echo "=================================="
          
          # Check if reports were generated
          if [ -d ".lighthouseci" ]; then
            echo "‚úÖ Performance reports generated in .lighthouseci/"
            ls -la .lighthouseci/ || true
          else
            echo "‚ö†Ô∏è No performance reports found"
          fi

      - name: Upload Performance Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-performance-reports-${{ github.run_number }}
          path: |
            .lighthouseci/
            lhci-data.db
          retention-days: 30

      - name: Performance Regression Check
        if: github.event_name == 'pull_request'
        run: |
          echo "üîç Checking for performance regressions..."
          echo "This PR will be compared against the base branch for performance changes"
          echo "Any performance degradation will be reported in the PR comments"

      - name: Notify Performance Results
        if: failure()
        run: |
          echo "‚ùå Performance checks failed!"
          echo "The application did not meet the required performance standards:"
          echo "‚Ä¢ Performance Score: Must be 100%"
          echo "‚Ä¢ Core Web Vitals: Must meet all thresholds"
          echo "‚Ä¢ Resource Budgets: Must stay within limits"
          echo ""
          echo "Please review the Lighthouse reports and optimize accordingly."
          echo "Common optimizations:"
          echo "‚Ä¢ Optimize images and use next/image"
          echo "‚Ä¢ Minimize JavaScript bundles"
          echo "‚Ä¢ Implement proper caching strategies"
          echo "‚Ä¢ Optimize server response times"
          exit 1